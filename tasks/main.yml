---
# tasks file for network_backup_git
  - name: make sure the git repo is up to date/exists on localhost
    git:
      repo: "{{ backup_repo }}"
      dest: "{{ backup_dir }}"
      update: yes
    delegate_to: localhost
    run_once: True

  - name: include cisco task when Cisco device
    include_tasks: "{{ role_path }}/tasks/network_backup_cisco.yml"
#    include_tasks: "{{ playbook_dir }}/network_backup_cisco.yml"
    when: ansible_network_os == "asa" or ansible_network_os == "ios" or ansible_network_os == "nxos"

  - name: include arista task when Arista device
    include_tasks: "{{ role_path }}/tasks/network_backup_arista.yml"
#    include_tasks: "{{ playbook_dir }}/network_backup_arista.yml"
    when: ansible_network_os == "eos"

  - name: include junos task when Junos device
    include_tasks: "{{ role_path }}/tasks/network_backup_juniper.yml"
#    include_tasks: "{{ playbook_dir }}/network_backup_juniper.yml"
    when: ansible_network_os == "junos"

  - name: include routeros task when Mikrotik device
    include_tasks: "{{ role_path }}/tasks/network_backup_mikrotik.yml"
#    include_tasks: "{{ playbook_dir }}/network_backup_mikrotik.yml"
    when: ansible_network_os == "routeros"

  - name: Copy the backup to repo
    copy:
      src: "{{ bup_temp_file }}"
      dest: "{{ backup_file }}"
    register: copy_result
    delegate_to: localhost

  - name: Delete the temp file
    file:
      path: "{{ bup_temp_file }}"
      state: absent
    changed_when: False
    delegate_to: localhost

  - name: get timestamp
    set_fact: time="{{lookup('pipe','date \"+%Y-%m-%d-%H-%M\"')}}"
    run_once: true

  - name: Add any new backups to the repossitory
    shell: "git add *; git commit -m '{{ time }}'; git push"
    args:
      chdir: "{{ backup_dir }}"
    environment:
      GIT_COMMITTER_NAME: "{{ git_name | default(omit) }}"
      GIT_COMMITTER_EMAIL: "{{ git_email | default(omit) }}"
      GIT_AUTHOR_NAME: "{{ git_name | default(omit) }}"
      GIT_AUTHOR_EMAIL: "{{ git_email | default(omit) }}"
    delegate_to: localhost
    changed_when: git_return.stderr != "Everything up-to-date"
    run_once: true
    connection: local
    register: git_return
